# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:latest

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging

  - apt update -y
  - apt upgrade -y
  - apt install graphviz graphviz-dev protobuf-compiler libprotoc-dev -y -f
  - pip install pip --upgrade

  # 安裝虛擬環境
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

mkdocs:
  script:
  # Python相依性佈署測試
  - pip install mkdocs psycopg2-binary mkdocs mkdocs-bootstrap mkdocs-webcontext-plugin mkdocs-mdpo-plugin mkdocs-markdownextradata-plugin mkdocs-gitlab-plugin mkdocs-rss-plugin mkdocs-i18n mkdocs-material mdx_truly_sane_lists mkdocs-redirects mkdocs-mermaid-plugin mkdocs-mermaid2-plugin markdown --upgrade

aipp:
  script:
  # Python套件安裝測試
  - apt-get install python3 python3-dev python3-pip python3-all-dev -y -f
  - apt-get install git ffmpeg libxss1 xdg-utils -y -f
  - apt-get install graphviz graphviz-dev -y -f
  - apt install python-gpg libgpgme-dev -y -f
  - apt-get install protobuf-compiler libprotoc-dev -y -f
  - apt-get install python3-pyaudio portaudio19-dev -y -f
  - apt-get install build-essential swig libpulse-dev libasound2-dev  -y -f
  - apt-get install zlib1g-dev libbz2-dev liblzma-dev libboost-all-dev -y -f
  - apt install libxslt1-dev -y -f
  - apt-get install python-virtualenv g++ libyaml-dev libav-tools libmp3lame0 libavcodec-extra-* -y -f
  - apt-get install libpq-dev  postgresql postgresql-contrib -y -f # pgsql
  - apt install cmake clang bison flex libfuse-dev libudev-dev pkg-config libc6-dev-i386 \
  linux-headers-generic gcc-multilib libcairo2-dev libgl1-mesa-dev libglu1-mesa-dev libtiff5-dev \
  libfreetype6-dev git git-lfs libelf-dev libxml2-dev libegl1-mesa-dev libfontconfig1-dev libbsd-dev \
  libxrandr-dev libxcursor-dev libgif-dev libavutil-dev libpulse-dev libavformat-dev libavcodec-dev \
  libswresample-dev libdbus-1-dev libxkbfile-dev libssl-dev -y -f
  
  # C 語言
  - apt-get install cmake make clang -y -f # 編譯、環境建置
  - apt-get install valgrind -y -f  # 動態檢查
  - apt-get install cppcheck -y -f  # 靜態檢查
  - apt-get install infer astyle uncrustify clang-format -y -f  # 風格化
  - apt-get install check -y -f  # 程式程式
  - apt install build-essential -y -f

  - python src/auto_install_python_pack.py

# run:
#   script:
#     - python setup.py bdist_wheel
#     # an alternative approach is to install and run:
#     - pip install dist/*
#     # run the command here
#   artifacts:
#     paths:
#       - dist/*.whl

pages:
  stage: deploy
  script:
    - mkdocs build
    - mkdir .public
    - cp -r * .public
    - mv .public public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  environment: production
